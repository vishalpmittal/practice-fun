===========
Problem
===========
Design an android application which shares it's location with a server for tracking.

=================================
Questions to ask
=================================
Q: Aspects to consider 
A:
Any android application design should consider the following aspects.
-  Bandwidth Consumption
-  Battery Consumption
-  Persistence
-  Resilience
-  Device Support / API
-  Memory Usage

Q: What is the frequency of posting location ?
Q: Should the location history stored on the device ?
Q: What if the location is not reported due to bad network? Should it be posted after sometime?
Q: Is there any threshold between two location postings? Like the user should move at 
least 100m or for every 2 minutes ?
Q: Should the app share location even when the device is idle?
Q: What are the supported api levels ?
Q: Can the application assume the availability of play services ?
Q: Should the app post the location when it is running in the background ?

===========
Solution 1
===========

Location Fetch :
-----------------
Play Services allow to get user location periodically by specifying the details in 
the location request. Battery optimizations are taken care by the library.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// Refer play services location request docs
locationRequest = new LocationRequest()
                    .setPriority(LOCATION_PRECISION_CODE)
                    .setInterval(LOCATION_TIME_THRESHOLD); 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

In-case of unavailability of play services, the APP has to use framework provided API to 
track the user location. This is very important as many devices in some countries do 
not have play services installed.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
locationManager.requestLocationUpdates(LOCATION_PROVIDER, 
                      LOCATION_TIME_THRESHOLD,
                      LOCATION_DISTANCE_THRESHOLD, locationListener);
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Persistence :
-------------
Locations with timestamps are to be stored in the device since the history has to be 
maintained as well as failed postings have to be repeated. The db structure is as follows:
id, latitude, longitude, timestamps, is_posted

Loosy Network :
---------------
Locations that were not reported because of network failure should be periodically 
posted to server (Ask for the period). For this we need to schedule a task which 
runs periodically to query the db and post the locations that were not posted.

Scheduling Task :
-----------------
With the background restrictions introduced in Android Oreo, using alarm services 
is error prone and has a lot of drawbacks. Background Jobs introduced in Android 
Lollipop would be a good alternative but they are not supported below Android 21. 
So a combination of Alarm service, GCM network manager and Android Job Scheduler 
should be used for scheduling. 

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
public class LocationSyncJob extends Job {

    public static final String TAG = "location_job";

    @Override
    @NonNull
    protected Result onRunJob(Params params) {

        // Iterate db
        LocationRepository repo = LocationRepository.getRepository(getContext());
        TrackerDatabase db = repo.getDb(getContext());

        List<LocationModel> locationList = db.locationDao().getNonPostedLocations();
        for(LocationModel model: locationList){
            LocationRepository.postLocation(model);
        }

        return Result.SUCCESS;
    }

    public static void scheduleJob() {
        new JobRequest.Builder(LocationSyncJob.TAG)
                .setPeriodic(TimeUnit.MINUTES.toMillis(AppConfig.SYNC_TIME), 
                    TimeUnit.MINUTES.toMillis(AppConfig.SYNC_GRACE_TIME)
                )
                .setRequiredNetworkType(JobRequest.NetworkType.CONNECTED)
                .setUpdateCurrent(true)
                .build()
                .schedule();
    }
}
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Handling Doze Mode & Background Restrictions of Oreo :
------------------------------------------------------
Doze mode  introduced in android marshmallow performs battery optimizations by keeping 
the device in sleep mode and forcing network restrictions on it. Also the background 
restrictions introduced in android Oreo restrict the background apps to receive 
background locations only a few times per hour. 

To handle both these issues and continuously track user location, app has to appear
 as a foreground process for the android system.This could be achieved by starting a 
 foreground service in the app.Refer android docs for more information on Foreground 
 services. This way we can bypass both the restrictions and app can continuously 
 receive and post locations.
