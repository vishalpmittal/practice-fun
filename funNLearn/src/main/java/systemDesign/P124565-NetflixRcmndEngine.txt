===========
Problem
===========
How would you design netflix recommendation engine? 
Like movie suggestion based on history and interest?

===========
Solution 1
===========

Elastic search
-----------------
create a map of user -> set of movies user has watched or liked
find out related movies to those ones and recommend the user.

Matching score properties:
---------------------------
for two movies/products/songs/etc to be similar a set of properties can play role. 
Let's take movie example:
-  is animated?
-  is by marvel/disney/pixar?
-  is action/romance/suspense/horror/thriller/etc?
-  has won academy awards?
-  family movie for kids?
-  has a sequel?
-  language/year of release?
-  same actor/director?

while creating a database of matching movies, each movie should be given scores
based on these properties and then highest scores can be stored as matching movies. 

Other factors to consider:
----------------------------------
-  time of watching
-  was previous recommendation liked?
-  does user finish watching the movie or leave partially watched?
-  twitter/Facebook feeds and what other movies were mentioned with this one. 

===========
Solution 2
===========

Collaborative Filtering
----------------------------------
This approach is basically a User survey. 

Take a set of users and a set of movies they were recommended. Then identify
which ones they ended up watching completely and liking. 

Also even without recommended movies, 
-  take 10000 users who watched Movie1
-  find out the most common movies all 10000 users watched after watching movie1. 
-  those common watched movies will be worth recommending. 

Collaborative filtering exec
----------------------------------
Keep every user in Elastic search along with following properties
    { 
        "completed":[12,44,55], 
        "seen":[45], 
        "highly_rated":[32,12], 
        "badly_rated":[3,99], 
        "geo":"usa", 
        "gender":"M"
    }

Do an elastic search query with higher weights for highly_rated and so on. This will 
give you top N users similar to the user.

Take a union of highly_rated and completed titles from these users and suggest
those that user has not already seen as relevant recommendations.


logistic regression one v/s all.
----------------------------------
Create user Feature Vector
[gender, location, seen_1, seen_2, seen_3, seen_4,.... rated_1, rated_2, rated_3....]

You will have similar vector for every user. Now train one v/s all classifier to
give a score for every title given feature vector. If you have million titles
you will have million models. When you are training for label Y and if user has
already seen Y you should remove that from feature vector otherwise that signal
alone would dominate the model.

For the user's feature vector rank all the titles in that order.

You can also train classifiers that will emit favourite genres, favourite artists,
favourite on weekdays vs weekends etc.
