===========
Problem
===========
First non repeating word in a file? File size can be 100GB.

Given a text file of size say 100GB? Task is to find first non repeating word in this file?
constraints: You can traverse the file only once.

===========
Solution 1
===========
Let's use 2 different stores: HashSet (multiUsedSet) for the multiply-used words,
and HashMap (singleUseMap) of word to position for singly-used words.

-  Buffer input and process in manageable chunks of course
-  For each word, first check if in multiUsedSet.
   -  If so, continue to next word.
   -  If not, check if in singleUseMap. If in singleUseMap, remove and add to
   multiUsedSet. If not, add to multiUsedSet with value as the position (depending
   on parser, single vs. multi-threads, could be byte position or word count since
   start of text).
-  When completed all words, iterate over all entries in singleUseMap and return
word with lowest position.

===========
Solution 2
===========
This can be solved by using SET and LIST together. SET doesn't store duplicates and
LIST maintains insertion order.

-  For each word
   -  add it to "set". (set.add(str) will return either true or false).
   -  "If" set.add(str) is true, It means the present word hasn't seen before 
        for now. add it to "list".
   -  "else" // It means the current word is seen before and hence it should
   removed from the list. Remove the current word from "list"

-  After all words have been read, "List" contains all non-repeating words.
-  Return "list.get(0)" as first non-repeating character as list maintains the insertion order.

Thus, The first non-repeating character has been found in single traversal.

===========
Solution 3
===========
Assuming file contains only valid English words we can use this approach:

Put all the words of “Oxford English Dictionary” into a file(output_file.txt). 
[file format: “word - count - index” ] which will be few MB’s we can easily
accommodate that file in main-memory.
Iterate the input file and increment the count of each word count in ouput_file.txt.
Check for the word having least index and word count as 1.