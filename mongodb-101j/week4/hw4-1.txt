HOMEWORK: HOMEWORK 4.1

Suppose you have a collection with the following indexes:

> db.products.getIndexes()
[
	{
		"v" : 1,
		"key" : {
			"_id" : 1
		},
		"ns" : "store.products",
		"name" : "_id_"
	},
	{
		"v" : 1,
		"key" : {
			"sku" : 1
		},
                "unique" : true,
		"ns" : "store.products",
		"name" : "sku_1"
	},
	{
		"v" : 1,
		"key" : {
			"price" : -1
		},
		"ns" : "store.products",
		"name" : "price_-1"
	},
	{
		"v" : 1,
		"key" : {
			"description" : 1
		},
		"ns" : "store.products",
		"name" : "description_1"
	},
	{
		"v" : 1,
		"key" : {
			"category" : 1,
			"brand" : 1
		},
		"ns" : "store.products",
		"name" : "category_1_brand_1"
	},
	{
		"v" : 1,
		"key" : {
			"reviews.author" : 1
		},
		"ns" : "store.products",
		"name" : "reviews.author_1"
	}
Which of the following queries can utilize at least one index to find all matching documents or to sort? Check all that apply.


True: db.products.find( { 'brand' : "GE" } ).sort( { price : 1 } )
False: db.products.find( { 'brand' : "GE" } )
True: db.products.find( { $and : [ { price : { $gt : 30 } },{ price : { $lt : 50 } } ] } ).sort( { brand : 1 } )
False: db.products.find( { brand : 'GE' } ).sort( { category : 1, brand : -1 } )

===================================================================


1) db.products.find({'brand':"GE"}) 
if you check in document , there is no index with brand, you will find brand index as multi index with category. but in query we are only using brand so above query cannot utilize and index.
 
2)db.products.find({'brand':"GE"}).sort({price:1}) 
if you check in document, you will see brand cannot use an index, but in document if you see price is present as single index. so the above query use an index. 

3)db.products.find({$and:[{price:{$gt:30}},{price:{$lt:50}}]}).sort({brand:1}) 
 price is present, therefore query is using index.
 
4) db.products.find({brand:'GE'}).sort({category:1, brand:-1}).explain() 
 category and brand are present in document as multi - index  but if you check index is created with {category:1, brand:1} but while using in query it is using  {category:1, brand:-1}, so for sorting mongo will perform complete scan and it will not use index . if index was created with {category:1, brand:-1} then the above query will be using an index.


